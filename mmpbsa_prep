#!/bin/bash

id=${1}
lig=${2}
method=${3:-1}
het=${4:-${lig}}
run=${5:-false}

rm -f mmpbsa.leap
rm -f *.{top,crd}
rm -f *_new.{prmtop,top}
rm -f *_mmpbsa.{prmtop,top}

#Make sure receptor is prepped for AMBER
echo `pdb4amber -y -i receptor.pdb -o receptor_amber.pdb`

#Create dry topologies in leap
echo "source leaprc.ff14SB" >> mmpbsa.leap
echo "source leaprc.gaff" >> mmpbsa.leap
echo "loadAmberParams Mg.frcmod" >> mmpbsa.leap
echo "loadAmberParams ${het}.frcmod" >> mmpbsa.leap
echo "${lig} = loadMol2 ${het}.mol2" >> mmpbsa.leap
echo "receptor = loadPDB receptor_amber.pdb" >> mmpbsa.leap
echo "complex = combine {receptor ${lig}}" >> mmpbsa.leap
echo "set default PBRadii mbondi2" >> mmpbsa.leap
echo "saveAmberParm ${lig} ${lig}_dry.prmtop ${lig}.crd" >> mmpbsa.leap
echo "saveAmberParm receptor rec_dry.prmtop rec.crd" >> mmpbsa.leap
echo "saveAmberParm complex com_dry.prmtop com.crd" >> mmpbsa.leap
echo "quit" >> mmpbsa.leap	
echo `tleap -f mmpbsa.leap`

#Use parmEd to fix the prmtops
if [ $method == "1" ]; then
	echo `parmedit1 ${lig} ${het} | parmed.py`	
elif [ $method == "3" ]; then
	echo `parmedit ${lig} ${het} | parmed.py`
fi

#Make mmpbsa input file
echo "Input file for GB and PB calculation" > mmpbsa.in
echo -e "&general\n\tstartframe=1, endframe=1000000000, interval=5," >> mmpbsa.in
echo -e "/\n&gb\n\tigb=5,\n/\n&pb\n\tindi=1.0,exdi=80.0,\n/" >> mmpbsa.in

#Prep run script for running on the cluster
rm -f run.pbs
echo "#!/bin/bash" >> run.pbs
echo "#PBS -N ${id}" >> run.pbs
echo "#PBS -j oe" >> run.pbs
echo "#PBS -l nodes=1:ppn=1" >> run.pbs
echo "#PBS -l walltime=28:00:00:00" >> run.pbs
echo "#PBS -q dept_24_core" >> run.pbs
echo "echo Running on \`hostname\`" >> run.pbs
echo "echo workdir \$PBS_O_WORKDIR" >> run.pbs
echo "echo ld_library_path \$LD_LIBRARY_PATH" >> run.pbs
echo "cd \$PBS_O_WORKDIR" >> run.pbs
echo "SCRDIR=/scr/\$PBS_JOBID" >> run.pbs
echo "if [[ ! -e \$SCRDIR ]]; then" >> run.pbs
echo "	mkdir \$SCRDIR" >> run.pbs
echo "fi" >> run.pbs
echo "echo scratch drive \${SCRDIR}" >> run.pbs
echo "cp \$PBS_O_WORKDIR/* \${SCRDIR}" >> run.pbs
echo "cd \${SCRDIR}" >> run.pbs
echo "source /usr/local/amber14/amber.sh" >> run.pbs
echo 'trap "find . -type f -name _MMPBSA\* -exec cp {} \$PBS_O_WORKDIR \\;" EXIT' >> run.pbs
if [ $method == "1" ]; then
	echo "MMPBSA.py -O -i mmpbsa.in -o mmpbsa.dat -sp ${het}receptor_mmpbsa.prmtop -cp com_mmpbsa.prmtop -rp rec_mmpbsa.prmtop -lp ${lig}_mmpbsa.prmtop -y ${het}receptor.dcd" >> run.pbs
elif [ $method == "3" ]; then
	echo "MMPBSA.py -O -i mmpbsa.in -o mmpbsa.dat -sp ${het}receptor_mmpbsa.prmtop -cp com_mmpbsa.prmtop -rp rec_mmpbsa.prmtop -lp ${lig}_mmpbsa.prmtop -y ${het}receptor.dcd -yr receptor.dcd -yl ${lig}.dcd -srp receptor_solvated_mmpbsa.prmtop -slp ${lig}_solvated_mmpbsa.prmtop" >> run.pbs
fi
echo "cp mmpbsa.dat \$PBS_O_WORKDIR" >> run.pbs
echo "exit" >> run.pbs

#If last argument isn't "false," go ahead and run it already
if [ $run != "false" ]; then
	if [ $method == "1" ]; then
		echo `MMPBSA.py -O -i mmpbsa.in -o mmpbsa.dat -sp ${het}receptor_mmpbsa.prmtop -cp com_mmpbsa.prmtop -rp rec_mmpbsa.prmtop -lp ${lig}_mmpbsa.prmtop -y ${het}receptor.dcd`
	elif [ $method == "3" ]; then
		echo `MMPBSA.py -O -i mmpbsa.in -o mmpbsa.dat -sp ${het}receptor_mmpbsa.prmtop -cp com_mmpbsa.prmtop -rp rec_mmpbsa.prmtop -lp ${lig}_mmpbsa.prmtop -y ${het}receptor.dcd -yr receptor.dcd -yl ${lig}.dcd -srp receptor_solvated_mmpbsa.prmtop -slp ${lig}_solvated_mmpbsa.prmtop`
	fi
fi
